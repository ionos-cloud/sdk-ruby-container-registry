=begin
#Container Registry service

#Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls.

The version of the OpenAPI document: 1.0
Contact: support@cloud.ionos.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'cgi'

module IonoscloudContainerRegistry
  class RegistriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete registry
    # @param registry_id [String] The unique ID of the registry
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def registries_delete(registry_id, opts = {})
      registries_delete_with_http_info(registry_id, opts)
      nil
    end

    # Delete registry
    # @param registry_id [String] The unique ID of the registry
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def registries_delete_with_http_info(registry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistriesApi.registries_delete ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling RegistriesApi.registries_delete"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling RegistriesApi.registries_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/registries/{registryId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RegistriesApi.registries_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistriesApi#registries_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a registry
    # Get all information for a specific container registry
    # @param registry_id [String] The unique ID of the registry
    # @param [Hash] opts the optional parameters
    # @return [RegistryResponse]
    def registries_find_by_id(registry_id, opts = {})
      data, _status_code, _headers = registries_find_by_id_with_http_info(registry_id, opts)
      data
    end

    # Get a registry
    # Get all information for a specific container registry
    # @param registry_id [String] The unique ID of the registry
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistryResponse, Integer, Hash)>] RegistryResponse data, response status code and response headers
    def registries_find_by_id_with_http_info(registry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistriesApi.registries_find_by_id ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling RegistriesApi.registries_find_by_id"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling RegistriesApi.registries_find_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/registries/{registryId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RegistriesApi.registries_find_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistriesApi#registries_find_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all container registries
    # List all managed container registries for your account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_name The registry name to search for
    # @option opts [String] :limit The maximum number of elements to return (used together with nextPageToken for pagination) (default to '100')
    # @option opts [String] :next_page_token The next page from the complete list of elements (used together with limit for pagination)
    # @return [RegistriesResponse]
    def registries_get(opts = {})
      data, _status_code, _headers = registries_get_with_http_info(opts)
      data
    end

    # List all container registries
    # List all managed container registries for your account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_name The registry name to search for
    # @option opts [String] :limit The maximum number of elements to return (used together with nextPageToken for pagination)
    # @option opts [String] :next_page_token The next page from the complete list of elements (used together with limit for pagination)
    # @return [Array<(RegistriesResponse, Integer, Hash)>] RegistriesResponse data, response status code and response headers
    def registries_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistriesApi.registries_get ...'
      end
      # resource path
      local_var_path = '/registries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter.name'] = opts[:'filter_name'] if !opts[:'filter_name'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RegistriesApi.registries_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistriesApi#registries_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the properties of a registry
    # Update the properties of a registry - \"garbageCollectionSchedule\" time and days of the week for runs
    # @param registry_id [String] The unique ID of the registry
    # @param patch_registry_input [PatchRegistryInput] 
    # @param [Hash] opts the optional parameters
    # @return [RegistryResponse]
    def registries_patch(registry_id, patch_registry_input, opts = {})
      data, _status_code, _headers = registries_patch_with_http_info(registry_id, patch_registry_input, opts)
      data
    end

    # Update the properties of a registry
    # Update the properties of a registry - \&quot;garbageCollectionSchedule\&quot; time and days of the week for runs
    # @param registry_id [String] The unique ID of the registry
    # @param patch_registry_input [PatchRegistryInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistryResponse, Integer, Hash)>] RegistryResponse data, response status code and response headers
    def registries_patch_with_http_info(registry_id, patch_registry_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistriesApi.registries_patch ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling RegistriesApi.registries_patch"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling RegistriesApi.registries_patch, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'patch_registry_input' is set
      if @api_client.config.client_side_validation && patch_registry_input.nil?
        fail ArgumentError, "Missing the required parameter 'patch_registry_input' when calling RegistriesApi.registries_patch"
      end
      # resource path
      local_var_path = '/registries/{registryId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_registry_input)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RegistriesApi.registries_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistriesApi#registries_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create container registry
    # Create a registry to hold container images or OCI compliant artifacts - \"name\" must have passed validation - \"location\" must be one of the available location IDs - \"garbageCollectionSchedule\" time and days of the week for runs
    # @param post_registry_input [PostRegistryInput] 
    # @param [Hash] opts the optional parameters
    # @return [PostRegistryOutput]
    def registries_post(post_registry_input, opts = {})
      data, _status_code, _headers = registries_post_with_http_info(post_registry_input, opts)
      data
    end

    # Create container registry
    # Create a registry to hold container images or OCI compliant artifacts - \&quot;name\&quot; must have passed validation - \&quot;location\&quot; must be one of the available location IDs - \&quot;garbageCollectionSchedule\&quot; time and days of the week for runs
    # @param post_registry_input [PostRegistryInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostRegistryOutput, Integer, Hash)>] PostRegistryOutput data, response status code and response headers
    def registries_post_with_http_info(post_registry_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistriesApi.registries_post ...'
      end
      # verify the required parameter 'post_registry_input' is set
      if @api_client.config.client_side_validation && post_registry_input.nil?
        fail ArgumentError, "Missing the required parameter 'post_registry_input' when calling RegistriesApi.registries_post"
      end
      # resource path
      local_var_path = '/registries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_registry_input)

      # return_type
      return_type = opts[:debug_return_type] || 'PostRegistryOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RegistriesApi.registries_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistriesApi#registries_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a container registry
    # Create/replace a registry to hold container images or OCI compliant artifacts  **On create** - \"name\" must have passed validation - \"location\" must be one of the available location IDs  **On update** - \"name\" cannot be changed - \"location\" cannot be changed  **On create or update** - \"garbageCollectionSchedule\": time and days of the week for runs 
    # @param registry_id [String] The unique ID of the registry
    # @param put_registry_input [PutRegistryInput] 
    # @param [Hash] opts the optional parameters
    # @return [PutRegistryOutput]
    def registries_put(registry_id, put_registry_input, opts = {})
      data, _status_code, _headers = registries_put_with_http_info(registry_id, put_registry_input, opts)
      data
    end

    # Create or replace a container registry
    # Create/replace a registry to hold container images or OCI compliant artifacts  **On create** - \&quot;name\&quot; must have passed validation - \&quot;location\&quot; must be one of the available location IDs  **On update** - \&quot;name\&quot; cannot be changed - \&quot;location\&quot; cannot be changed  **On create or update** - \&quot;garbageCollectionSchedule\&quot;: time and days of the week for runs 
    # @param registry_id [String] The unique ID of the registry
    # @param put_registry_input [PutRegistryInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutRegistryOutput, Integer, Hash)>] PutRegistryOutput data, response status code and response headers
    def registries_put_with_http_info(registry_id, put_registry_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistriesApi.registries_put ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling RegistriesApi.registries_put"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling RegistriesApi.registries_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'put_registry_input' is set
      if @api_client.config.client_side_validation && put_registry_input.nil?
        fail ArgumentError, "Missing the required parameter 'put_registry_input' when calling RegistriesApi.registries_put"
      end
      # resource path
      local_var_path = '/registries/{registryId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_registry_input)

      # return_type
      return_type = opts[:debug_return_type] || 'PutRegistryOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RegistriesApi.registries_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistriesApi#registries_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
