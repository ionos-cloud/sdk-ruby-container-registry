=begin
#Container Registry service

#Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls.

The version of the OpenAPI document: 1.0
Contact: support@cloud.ionos.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'cgi'

module IonoscloudContainerRegistry
  class RepositoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete repository
    # Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
    # @param registry_id [String] The unique ID of the registry
    # @param name [String] The name of the repository
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def registries_repositories_delete(registry_id, name, opts = {})
      registries_repositories_delete_with_http_info(registry_id, name, opts)
      nil
    end

    # Delete repository
    # Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
    # @param registry_id [String] The unique ID of the registry
    # @param name [String] The name of the repository
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def registries_repositories_delete_with_http_info(registry_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoriesApi.registries_repositories_delete ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling RepositoriesApi.registries_repositories_delete"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling RepositoriesApi.registries_repositories_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RepositoriesApi.registries_repositories_delete"
      end
      pattern = Regexp.new(/^[a-z0-9]+(?:[._-][a-z0-9]+)*$/)
      if @api_client.config.client_side_validation && name !~ pattern
        fail ArgumentError, "invalid value for 'name' when calling RepositoriesApi.registries_repositories_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/registries/{registryId}/repositories/{name}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"RepositoriesApi.registries_repositories_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoriesApi#registries_repositories_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
