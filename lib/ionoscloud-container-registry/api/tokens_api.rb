=begin
#Container Registry service

#Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls.

The version of the OpenAPI document: 1.0
Contact: support@cloud.ionos.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'cgi'

module IonoscloudContainerRegistry
  class TokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete token
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def registries_tokens_delete(registry_id, token_id, opts = {})
      registries_tokens_delete_with_http_info(registry_id, token_id, opts)
      nil
    end

    # Delete token
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def registries_tokens_delete_with_http_info(registry_id, token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.registries_tokens_delete ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling TokensApi.registries_tokens_delete"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling TokensApi.registries_tokens_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.registries_tokens_delete"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && token_id !~ pattern
        fail ArgumentError, "invalid value for 'token_id' when calling TokensApi.registries_tokens_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/registries/{registryId}/tokens/{tokenId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"TokensApi.registries_tokens_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#registries_tokens_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get token information
    # Gets all information for a specific token used to access a container registry
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param [Hash] opts the optional parameters
    # @return [TokenResponse]
    def registries_tokens_find_by_id(registry_id, token_id, opts = {})
      data, _status_code, _headers = registries_tokens_find_by_id_with_http_info(registry_id, token_id, opts)
      data
    end

    # Get token information
    # Gets all information for a specific token used to access a container registry
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResponse, Integer, Hash)>] TokenResponse data, response status code and response headers
    def registries_tokens_find_by_id_with_http_info(registry_id, token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.registries_tokens_find_by_id ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling TokensApi.registries_tokens_find_by_id"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling TokensApi.registries_tokens_find_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.registries_tokens_find_by_id"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && token_id !~ pattern
        fail ArgumentError, "invalid value for 'token_id' when calling TokensApi.registries_tokens_find_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/registries/{registryId}/tokens/{tokenId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"TokensApi.registries_tokens_find_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#registries_tokens_find_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all tokens for the container registry
    # @param registry_id [String] The unique ID of the registry
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The first element (from the complete list of the elements) to include in the response (used together with limit for pagination) (default to '0')
    # @option opts [String] :limit The maximum number of elements to return (used together with offset for pagination) (default to '100')
    # @return [TokensResponse]
    def registries_tokens_get(registry_id, opts = {})
      data, _status_code, _headers = registries_tokens_get_with_http_info(registry_id, opts)
      data
    end

    # List all tokens for the container registry
    # @param registry_id [String] The unique ID of the registry
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The first element (from the complete list of the elements) to include in the response (used together with limit for pagination)
    # @option opts [String] :limit The maximum number of elements to return (used together with offset for pagination)
    # @return [Array<(TokensResponse, Integer, Hash)>] TokensResponse data, response status code and response headers
    def registries_tokens_get_with_http_info(registry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.registries_tokens_get ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling TokensApi.registries_tokens_get"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling TokensApi.registries_tokens_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/registries/{registryId}/tokens'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokensResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"TokensApi.registries_tokens_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#registries_tokens_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update token
    # Update token properties, for example: - change status to 'enabled' or 'disabled' - change expiry date
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param patch_token_input [PatchTokenInput] 
    # @param [Hash] opts the optional parameters
    # @return [TokenResponse]
    def registries_tokens_patch(registry_id, token_id, patch_token_input, opts = {})
      data, _status_code, _headers = registries_tokens_patch_with_http_info(registry_id, token_id, patch_token_input, opts)
      data
    end

    # Update token
    # Update token properties, for example: - change status to &#39;enabled&#39; or &#39;disabled&#39; - change expiry date
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param patch_token_input [PatchTokenInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResponse, Integer, Hash)>] TokenResponse data, response status code and response headers
    def registries_tokens_patch_with_http_info(registry_id, token_id, patch_token_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.registries_tokens_patch ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling TokensApi.registries_tokens_patch"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling TokensApi.registries_tokens_patch, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.registries_tokens_patch"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && token_id !~ pattern
        fail ArgumentError, "invalid value for 'token_id' when calling TokensApi.registries_tokens_patch, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'patch_token_input' is set
      if @api_client.config.client_side_validation && patch_token_input.nil?
        fail ArgumentError, "Missing the required parameter 'patch_token_input' when calling TokensApi.registries_tokens_patch"
      end
      # resource path
      local_var_path = '/registries/{registryId}/tokens/{tokenId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_token_input)

      # return_type
      return_type = opts[:debug_return_type] || 'TokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"TokensApi.registries_tokens_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#registries_tokens_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create token
    # Create a token - password is only available once in the POST response
    # @param registry_id [String] The unique ID of the registry
    # @param post_token_input [PostTokenInput] 
    # @param [Hash] opts the optional parameters
    # @return [PostTokenOutput]
    def registries_tokens_post(registry_id, post_token_input, opts = {})
      data, _status_code, _headers = registries_tokens_post_with_http_info(registry_id, post_token_input, opts)
      data
    end

    # Create token
    # Create a token - password is only available once in the POST response
    # @param registry_id [String] The unique ID of the registry
    # @param post_token_input [PostTokenInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostTokenOutput, Integer, Hash)>] PostTokenOutput data, response status code and response headers
    def registries_tokens_post_with_http_info(registry_id, post_token_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.registries_tokens_post ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling TokensApi.registries_tokens_post"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling TokensApi.registries_tokens_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'post_token_input' is set
      if @api_client.config.client_side_validation && post_token_input.nil?
        fail ArgumentError, "Missing the required parameter 'post_token_input' when calling TokensApi.registries_tokens_post"
      end
      # resource path
      local_var_path = '/registries/{registryId}/tokens'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_token_input)

      # return_type
      return_type = opts[:debug_return_type] || 'PostTokenOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"TokensApi.registries_tokens_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#registries_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace token
    # Create/replace a token - password is only available once in the create response - \"name\" cannot be changed
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param put_token_input [PutTokenInput] 
    # @param [Hash] opts the optional parameters
    # @return [PutTokenOutput]
    def registries_tokens_put(registry_id, token_id, put_token_input, opts = {})
      data, _status_code, _headers = registries_tokens_put_with_http_info(registry_id, token_id, put_token_input, opts)
      data
    end

    # Create or replace token
    # Create/replace a token - password is only available once in the create response - \&quot;name\&quot; cannot be changed
    # @param registry_id [String] The unique ID of the registry
    # @param token_id [String] The unique ID of the token
    # @param put_token_input [PutTokenInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutTokenOutput, Integer, Hash)>] PutTokenOutput data, response status code and response headers
    def registries_tokens_put_with_http_info(registry_id, token_id, put_token_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.registries_tokens_put ...'
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling TokensApi.registries_tokens_put"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && registry_id !~ pattern
        fail ArgumentError, "invalid value for 'registry_id' when calling TokensApi.registries_tokens_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.registries_tokens_put"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && token_id !~ pattern
        fail ArgumentError, "invalid value for 'token_id' when calling TokensApi.registries_tokens_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'put_token_input' is set
      if @api_client.config.client_side_validation && put_token_input.nil?
        fail ArgumentError, "Missing the required parameter 'put_token_input' when calling TokensApi.registries_tokens_put"
      end
      # resource path
      local_var_path = '/registries/{registryId}/tokens/{tokenId}'.sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_token_input)

      # return_type
      return_type = opts[:debug_return_type] || 'PutTokenOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"TokensApi.registries_tokens_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#registries_tokens_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
